Index: app/src/main/java/it/volta/ts/easymask/activities/MaskActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.volta.ts.easymask.activities;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.view.HapticFeedbackConstants;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.request.target.CustomTarget;\r\nimport com.bumptech.glide.request.transition.Transition;\r\n\r\nimport it.volta.ts.easymask.R;\r\nimport it.volta.ts.easymask.tools.ToolSelector;\r\nimport it.volta.ts.easymask.util.GraphicUtil;\r\nimport it.volta.ts.easymask.widgets.MaskEraser;\r\nimport it.volta.ts.easymask.widgets.MaskImage;\r\n\r\npublic class MaskActivity extends AppCompatActivity\r\n{\r\n    private ImageView downloadedImg, brush, eraser, btnUpload;\r\n    private MaskImage maskImage;\r\n    private MaskEraser maskEraser;\r\n    RelativeLayout imageLayout;\r\n    private int screenHeight;\r\n    private int screenWidth;\r\n    private String url;\r\n    private int maxHeight, maxWidth;\r\n    private int imgHeight, imgWidth;\r\n    private int newHeight, newWidth;\r\n\r\n    private final double maxHeightRatio = 0.6;\r\n    private final double maxWidthRatio  = 0.9;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState)\r\n    {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_mask);\r\n\r\n        screenHeight = GraphicUtil.getScreenHeight(this);\r\n        screenWidth  = GraphicUtil.getScreenWidth(this);\r\n        maxHeight    = (int)(screenHeight * maxHeightRatio);\r\n        maxWidth     = (int)(screenWidth  * maxWidthRatio );\r\n\r\n        Bundle b = getIntent().getExtras();\r\n        url = b.getString(\"url\");\r\n        downloadedImg = findViewById(R.id.imgSlot);\r\n\r\n        imageLayout = findViewById(R.id.image_layout);\r\n\r\n        maskImage = findViewById(R.id.imgMask);\r\n        maskImage.setOnMaskTouch(onMaskTouch);\r\n\r\n        maskEraser = findViewById(R.id.imgEraser);\r\n        maskEraser.setOnMaskTouch(onMaskEraserTouch);\r\n        maskEraser.setMaskImage(maskImage);\r\n\r\n        loadImage(downloadedImg, url);\r\n\r\n\r\n        brush     = findViewById(R.id.brush );\r\n        eraser    = findViewById(R.id.eraser);\r\n        btnUpload = findViewById(R.id.btnUp );\r\n\r\n        brush.setOnClickListener(view -> {\r\n            ToolSelector.toolState = 1;\r\n            maskEraser.setEnabled(false);\r\n            maskImage.setEnabled(true);\r\n            view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n        });\r\n\r\n        eraser.setOnClickListener(view -> {\r\n            ToolSelector.toolState = 0;\r\n            maskEraser.setEnabled(true);\r\n            maskImage.setEnabled(false);\r\n            view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n        });\r\n\r\n        btnUpload.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setDimens(RelativeLayout imageLayout, int imgWidth, int imgHeight)\r\n    {\r\n        newHeight = imgHeight;\r\n        newWidth  = imgWidth;\r\n\r\n        if (imgWidth > imgHeight) {\r\n            float ratio = (float) maxWidth / (float) imgWidth;\r\n            newWidth  = (int)((float) imgWidth  * ratio);\r\n            newHeight = (int)((float) imgHeight * ratio);\r\n\r\n        } else {\r\n            float ratio = (float) maxHeight / (float) imgHeight;\r\n            newWidth  = (int)((float) imgWidth  * ratio);\r\n            newHeight = (int)((float) imgHeight * ratio);\r\n        }\r\n\r\n        GraphicUtil.applySize(imageLayout, newWidth, newHeight);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n        int width  = downloadedImg.getWidth();\r\n        int height = downloadedImg.getHeight();\r\n    }\r\n\r\n    private void loadImage(ImageView view, String url)\r\n    {\r\n        Glide.with(this)\r\n                .asBitmap()\r\n                .load(url)\r\n                .into(new CustomTarget<Bitmap>() {\r\n                    @Override\r\n                    public void onResourceReady(Bitmap bitmap, Transition<? super Bitmap> transition) {\r\n                        imgWidth  = bitmap.getWidth();\r\n                        imgHeight = bitmap.getHeight();\r\n                        view.setImageBitmap(bitmap);\r\n\r\n                        setDimens(imageLayout, imgWidth,imgHeight);\r\n                        //TODO Error: maskImage == null nella seconda scansione del qr\r\n                        Bitmap transBmp = Bitmap.createBitmap(imgWidth,imgHeight,Bitmap.Config.ARGB_8888);\r\n                        BitmapDrawable drawable = new BitmapDrawable(getResources(), bitmap);\r\n                        drawable.setAlpha(100);\r\n                        maskImage.setImageDrawable(drawable);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onLoadCleared(@Nullable Drawable placeholder) {\r\n                    }\r\n                });\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------\r\n\r\n\r\n    MaskEraser.OnMaskTouch onMaskEraserTouch = new MaskEraser.OnMaskTouch() {\r\n        @Override\r\n        public void onPoint(float x, float y) {\r\n\r\n        }\r\n    };\r\n\r\n\r\n    MaskImage.OnMaskTouch onMaskTouch = new MaskImage.OnMaskTouch()\r\n    {\r\n        @Override\r\n        public void onPoint(float x, float y) {\r\n            System.out.println(x + \", \" + y);\r\n        }\r\n    };\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/volta/ts/easymask/activities/MaskActivity.java b/app/src/main/java/it/volta/ts/easymask/activities/MaskActivity.java
--- a/app/src/main/java/it/volta/ts/easymask/activities/MaskActivity.java	(revision d8de7ee65ca5217aabf09857c816aeb9e7ad6d51)
+++ b/app/src/main/java/it/volta/ts/easymask/activities/MaskActivity.java	(date 1653651093510)
@@ -99,7 +99,6 @@
             float ratio = (float) maxWidth / (float) imgWidth;
             newWidth  = (int)((float) imgWidth  * ratio);
             newHeight = (int)((float) imgHeight * ratio);
-
         } else {
             float ratio = (float) maxHeight / (float) imgHeight;
             newWidth  = (int)((float) imgWidth  * ratio);
Index: app/src/main/java/it/volta/ts/easymask/widgets/MaskImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.volta.ts.easymask.widgets;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuffXfermode;\r\nimport android.util.AttributeSet;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.ColorInt;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport it.volta.ts.easymask.obj.FPoint;\r\nimport it.volta.ts.easymask.tools.ToolSelector;\r\n\r\npublic class MaskImage extends androidx.appcompat.widget.AppCompatImageView\r\n{\r\n    @ColorInt\r\n    int drawColor  = 0xffffff00;\r\n    int stroke;\r\n\r\n    private OnMaskTouch onMaskTouch;\r\n    private Bitmap eraseBitmap;\r\n\r\n    List<List<FPoint>> points;\r\n    List<FPoint>       track;\r\n\r\n    int width, height;\r\n    float fromX, fromY, toX, toY;\r\n    Paint paint, paintEraser;\r\n\r\n    public MaskImage(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public MaskImage(Context context, @Nullable AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public MaskImage(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    private void init()\r\n    {\r\n        points = new ArrayList<>();\r\n\r\n        paint = new Paint();\r\n\r\n        paint.setAntiAlias(true);\r\n        paint.setStrokeCap(Paint.Cap.ROUND);\r\n\r\n        setBackgroundColor(0x80ff0000);\r\n        setOnTouchListener(onTouch);\r\n    }\r\n\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)\r\n    {\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n        width  = MeasureSpec.getSize(widthMeasureSpec );\r\n        height = MeasureSpec.getSize(heightMeasureSpec);\r\n        stroke = width * 5 / 100;\r\n        paint.setStrokeWidth(stroke);\r\n    }\r\n\r\n    OnTouchListener onTouch = new OnTouchListener() {\r\n        @Override\r\n        public boolean onTouch(View view, MotionEvent event)\r\n        {\r\n            float x = event.getX();\r\n            float y = event.getY();\r\n\r\n            switch(event.getAction())\r\n            {\r\n                case MotionEvent.ACTION_DOWN:\r\n                    fromX = x;\r\n                    fromY = y;\r\n                    track = new ArrayList<>();\r\n\r\n                    points.add(track);\r\n\r\n\r\n                    if (ToolSelector.toolState == 1)\r\n                    {\r\n                        track.add(new FPoint(x,y, false));\r\n                    } else {\r\n                        track.add(new FPoint(x,y, true));\r\n                    }\r\n                    if (onMaskTouch != null)\r\n                        onMaskTouch.onPoint(x,y);\r\n                    break;\r\n                case MotionEvent.ACTION_UP:\r\n                    if (ToolSelector.toolState != 1)\r\n                    {\r\n\r\n                    }\r\n                    //show();\r\n                    break;\r\n                case MotionEvent.ACTION_MOVE:\r\n                    toX = x;\r\n                    toY = y;\r\n\r\n                    fromX = x;\r\n                    fromY = y;\r\n                    if (ToolSelector.toolState == 1)\r\n                    {\r\n                        track.add(new FPoint(x,y, false));\r\n                    } else {\r\n                        track.add(new FPoint(x,y, true));\r\n                    }\r\n                    if (onMaskTouch != null)\r\n                        onMaskTouch.onPoint(x,y);\r\n\r\n                    break;\r\n            }\r\n\r\n            MaskImage.this.invalidate();\r\n            return true;\r\n\r\n        }\r\n    };\r\n\r\n    public void erase(Bitmap bitmap){\r\n        eraseBitmap = bitmap;\r\n        paintEraser = new Paint();\r\n        MaskImage.this.invalidate();\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas)\r\n    {\r\n        //super.onDraw(canvas);\r\n\r\n        for (List<FPoint> track : points)\r\n        {\r\n            if (track.size() > 1) {\r\n                for (int idx = 1; idx < track.size(); idx++) {\r\n                    if(!(track.get(idx-1).eraser || track.get(idx).eraser)) {\r\n\r\n                        paint.setColor(drawColor);\r\n                        canvas.drawLine(track.get(idx - 1).x, track.get(idx - 1).y,\r\n                                track.get(idx).x, track.get(idx).y,\r\n                                paint);\r\n\r\n                        if(eraseBitmap!=null){\r\n                            paintEraser.setAlpha(0);\r\n                            paintEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\r\n                            canvas.drawBitmap(eraseBitmap, 0,0,paintEraser);\r\n                        }\r\n                    }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n            else {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------\r\n\r\n    public void setOnMaskTouch(OnMaskTouch onMaskTouch) {\r\n        this.onMaskTouch = onMaskTouch;\r\n    }\r\n\r\n    public interface OnMaskTouch\r\n    {\r\n        void onPoint(float x, float y);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------\r\n\r\n    /*\r\n    private void show()\r\n    {\r\n        System.out.println(\"--------------------\");\r\n        for (List<FPoint> track : points) {\r\n            System.out.println(\"New track\");\r\n            for (FPoint point : track)\r\n                System.out.println(\"    \" + (int)point.x + \", \" + (int)point.y);\r\n        }\r\n    }\r\n    */\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/volta/ts/easymask/widgets/MaskImage.java b/app/src/main/java/it/volta/ts/easymask/widgets/MaskImage.java
--- a/app/src/main/java/it/volta/ts/easymask/widgets/MaskImage.java	(revision d8de7ee65ca5217aabf09857c816aeb9e7ad6d51)
+++ b/app/src/main/java/it/volta/ts/easymask/widgets/MaskImage.java	(date 1653652471990)
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
-import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffXfermode;
@@ -24,6 +23,7 @@
 {
     @ColorInt
     int drawColor  = 0xffffff00;
+    int eraseColor = 0xffffffff;
     int stroke;
 
     private OnMaskTouch onMaskTouch;
@@ -34,7 +34,7 @@
 
     int width, height;
     float fromX, fromY, toX, toY;
-    Paint paint, paintEraser;
+    Paint drawPaint, erasePaint;
 
     public MaskImage(Context context) {
         super(context);
@@ -55,10 +55,17 @@
     {
         points = new ArrayList<>();
 
-        paint = new Paint();
+        drawPaint = new Paint();
+        drawPaint.setAntiAlias(true);
+        drawPaint.setStrokeCap(Paint.Cap.ROUND);
+        drawPaint.setColor(drawColor);
 
-        paint.setAntiAlias(true);
-        paint.setStrokeCap(Paint.Cap.ROUND);
+        erasePaint = new Paint();
+        erasePaint.setAlpha(0);
+        erasePaint.setAntiAlias(true);
+        erasePaint.setStrokeCap(Paint.Cap.ROUND);
+        erasePaint.setColor(eraseColor);
+        erasePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
 
         setBackgroundColor(0x80ff0000);
         setOnTouchListener(onTouch);
@@ -71,7 +78,9 @@
         width  = MeasureSpec.getSize(widthMeasureSpec );
         height = MeasureSpec.getSize(heightMeasureSpec);
         stroke = width * 5 / 100;
-        paint.setStrokeWidth(stroke);
+
+        drawPaint .setStrokeWidth(stroke);
+        erasePaint.setStrokeWidth(stroke);
     }
 
     OnTouchListener onTouch = new OnTouchListener() {
@@ -133,7 +142,7 @@
 
     public void erase(Bitmap bitmap){
         eraseBitmap = bitmap;
-        paintEraser = new Paint();
+        erasePaint = new Paint();
         MaskImage.this.invalidate();
     }
 
@@ -142,22 +151,25 @@
     {
         //super.onDraw(canvas);
 
-        for (List<FPoint> track : points)
+        for (int tdx=0; tdx < points.size(); tdx++)
+//        for (List<FPoint> track : points)
         {
+            List<FPoint> track = points.get(tdx);
+
             if (track.size() > 1) {
                 for (int idx = 1; idx < track.size(); idx++) {
                     if(!(track.get(idx-1).eraser || track.get(idx).eraser)) {
 
-                        paint.setColor(drawColor);
                         canvas.drawLine(track.get(idx - 1).x, track.get(idx - 1).y,
                                 track.get(idx).x, track.get(idx).y,
-                                paint);
+                                (tdx % 2 == 0 ? drawPaint : erasePaint)
+                        );
 
-                        if(eraseBitmap!=null){
-                            paintEraser.setAlpha(0);
-                            paintEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
-                            canvas.drawBitmap(eraseBitmap, 0,0,paintEraser);
-                        }
+//                        if(eraseBitmap!=null){
+//                            erasePaint.setAlpha(0);
+//                            erasePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
+//                            canvas.drawBitmap(eraseBitmap, 0,0, erasePaint);
+//                        }
                     }
 
 
Index: app/src/main/java/it/volta/ts/easymask/widgets/MaskEraser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.volta.ts.easymask.widgets;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuffXfermode;\r\nimport android.util.AttributeSet;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.ColorInt;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport it.volta.ts.easymask.obj.FPoint;\r\nimport it.volta.ts.easymask.tools.ToolSelector;\r\n\r\npublic class MaskEraser extends androidx.appcompat.widget.AppCompatImageView\r\n{\r\n\r\n    private MaskImage maskImage;\r\n\r\n    @ColorInt\r\n    int eraseColor = Color.WHITE;\r\n    int stroke;\r\n\r\n    private OnMaskTouch onMaskTouch;\r\n\r\n    List<List<FPoint>> points;\r\n    List<FPoint>       track;\r\n\r\n    int width, height;\r\n    float fromX, fromY, toX, toY;\r\n    Paint paint;\r\n\r\n\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)\r\n    {\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n        this.setDrawingCacheEnabled(true);\r\n        width  = MeasureSpec.getSize(widthMeasureSpec );\r\n        height = MeasureSpec.getSize(heightMeasureSpec);\r\n        stroke = width * 5 / 100;\r\n        paint.setStrokeWidth(stroke);\r\n    }\r\n\r\n    OnTouchListener onTouch = new OnTouchListener() {\r\n        @Override\r\n        public boolean onTouch(View view, MotionEvent event)\r\n        {\r\n            float x = event.getX();\r\n            float y = event.getY();\r\n\r\n            switch(event.getAction())\r\n            {\r\n                case MotionEvent.ACTION_DOWN:\r\n                    fromX = x;\r\n                    fromY = y;\r\n                    track = new ArrayList<>();\r\n\r\n                    points.add(track);\r\n\r\n\r\n                    if (ToolSelector.toolState == 1)\r\n                    {\r\n                        track.add(new FPoint(x,y, false));\r\n                    } else {\r\n                        track.add(new FPoint(x,y, true));\r\n                    }\r\n                    if (onMaskTouch != null)\r\n                        onMaskTouch.onPoint(x,y);\r\n                    break;\r\n                case MotionEvent.ACTION_UP:\r\n                    if (ToolSelector.toolState != 1)\r\n                    {\r\n\r\n                    }\r\n                    //show();\r\n                    break;\r\n                case MotionEvent.ACTION_MOVE:\r\n                    toX = x;\r\n                    toY = y;\r\n\r\n                    fromX = x;\r\n                    fromY = y;\r\n                    if (ToolSelector.toolState == 1)\r\n                    {\r\n                        track.add(new FPoint(x,y, false));\r\n                    } else {\r\n                        track.add(new FPoint(x,y, true));\r\n                    }\r\n                    if (onMaskTouch != null)\r\n                        onMaskTouch.onPoint(x,y);\r\n\r\n                    break;\r\n            }\r\n\r\n            MaskEraser.this.invalidate();\r\n            return true;\r\n        }\r\n    };\r\n\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas)\r\n    {\r\n        //super.onDraw(canvas);\r\n\r\n        for (List<FPoint> track : points)\r\n        {\r\n            if (track.size() > 1) {\r\n                for (int idx = 1; idx < track.size(); idx++) {\r\n                    if(track.get(idx-1).eraser || track.get(idx).eraser) {\r\n\r\n                        paint.setColor(eraseColor);\r\n                        canvas.drawLine(track.get(idx - 1).x, track.get(idx - 1).y,\r\n                                track.get(idx).x, track.get(idx).y,\r\n                                paint);\r\n                        maskImage.erase(this.getDrawingCache());\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------\r\n\r\n    public void setOnMaskTouch(OnMaskTouch onMaskTouch) {\r\n        this.onMaskTouch = onMaskTouch;\r\n    }\r\n\r\n    public interface OnMaskTouch\r\n    {\r\n        void onPoint(float x, float y);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------\r\n\r\n    public MaskEraser(Context context) {\r\n        super(context);\r\n        init();\r\n    }\r\n\r\n    public MaskEraser(Context context, @Nullable AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init();\r\n    }\r\n\r\n    public MaskEraser(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    private void init()\r\n    {\r\n        points = new ArrayList<>();\r\n\r\n        paint = new Paint();\r\n\r\n        paint.setAntiAlias(true);\r\n        paint.setStrokeCap(Paint.Cap.ROUND);\r\n\r\n        setBackgroundColor(0x00000000);\r\n        setOnTouchListener(onTouch);\r\n    }\r\n\r\n    public void setMaskImage(MaskImage maskImage) {\r\n        this.maskImage = maskImage;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/volta/ts/easymask/widgets/MaskEraser.java b/app/src/main/java/it/volta/ts/easymask/widgets/MaskEraser.java
--- a/app/src/main/java/it/volta/ts/easymask/widgets/MaskEraser.java	(revision d8de7ee65ca5217aabf09857c816aeb9e7ad6d51)
+++ b/app/src/main/java/it/volta/ts/easymask/widgets/MaskEraser.java	(date 1653651809796)
@@ -112,23 +112,28 @@
     {
         //super.onDraw(canvas);
 
-        for (List<FPoint> track : points)
-        {
-            if (track.size() > 1) {
-                for (int idx = 1; idx < track.size(); idx++) {
-                    if(track.get(idx-1).eraser || track.get(idx).eraser) {
+        if (points != null) {
+            for (List<FPoint> track : points) {
+                if (track.size() > 1) {
+                    for (int idx = 1; idx < track.size(); idx++) {
+                        if (track.get(idx - 1).eraser || track.get(idx).eraser) {
 
-                        paint.setColor(eraseColor);
-                        canvas.drawLine(track.get(idx - 1).x, track.get(idx - 1).y,
-                                track.get(idx).x, track.get(idx).y,
-                                paint);
-                        maskImage.erase(this.getDrawingCache());
+                            paint.setColor(eraseColor);
+                            canvas.drawLine(track.get(idx - 1).x, track.get(idx - 1).y,
+                                    track.get(idx).x, track.get(idx).y,
+                                    paint);
+                        }
                     }
+                } else {
+
                 }
             }
-            else {
 
-            }
+//            try {
+//                maskImage.erase(this.getDrawingCache());
+//            } catch (Exception e) {
+//                System.out.println("eccezione");
+//            }
         }
     }
 
